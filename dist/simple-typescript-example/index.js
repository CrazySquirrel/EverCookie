(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("EverCookie", [], factory);
	else if(typeof exports === 'object')
		exports["EverCookie"] = factory();
	else
		root["EverCookie"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(22);


/***/ },

/***/ 22:
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	__webpack_require__(23);
	var EverCookie = __webpack_require__(24);
	var LocalEverCookie = new EverCookie("test");
	window.document.write("<b>EverCookie set</b>: " + LocalEverCookie.setItem(true, "test", "test") + "<br/>");
	window.document.write("<b>EverCookie get</b>: " + LocalEverCookie.getItem(true, "test") + "<br/>");
	window.document.write("<b>EverCookie get keys</b>: " + LocalEverCookie.getKeys(true) + "<br/>");
	window.document.write("<b>EverCookie remove item</b>: " + LocalEverCookie.removeItem(true, "test") + "<br/>");
	window.document.write("<b>EverCookie clear</b>: " + LocalEverCookie.clear(true) + "<br/>");
	window.document.write("<b>EverCookie destroy</b>: " + LocalEverCookie.destroy() + "<br/>");

/***/ },

/***/ 23:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 24:
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("EverCookie", [], factory);
		else if(typeof exports === 'object')
			exports["EverCookie"] = factory();
		else
			root["EverCookie"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = __webpack_require__(2);
	
	
	/***/ },
	/* 1 */,
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _Cookies = __webpack_require__(3);
		
		var _Cookies2 = _interopRequireDefault(_Cookies);
		
		var _DOMStorage = __webpack_require__(17);
		
		var _DOMStorage2 = _interopRequireDefault(_DOMStorage);
		
		var _GlobalStorage = __webpack_require__(18);
		
		var _GlobalStorage2 = _interopRequireDefault(_GlobalStorage);
		
		var _LocalStorage = __webpack_require__(19);
		
		var _LocalStorage2 = _interopRequireDefault(_LocalStorage);
		
		var _SessionStorage = __webpack_require__(20);
		
		var _SessionStorage2 = _interopRequireDefault(_SessionStorage);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var AnimationFrame = __webpack_require__(16);
		
		/**
		 * EverCookie storage
		 */
		var EverCookie = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function EverCookie(hash) {
		    _classCallCheck(this, EverCookie);
		
		    /**
		     * Generate hash
		     * @type {string}
		     */
		    this.hash = hash || location.hostname;
		    /**
		     * Initialise stores
		     * @type {Array}
		     */
		    this.stores = [];
		    if (typeof _Cookies2.default !== "undefined") {
		      this.stores.push(new _Cookies2.default(this.hash));
		    }
		    if (typeof _GlobalStorage2.default !== "undefined") {
		      this.stores.push(new _GlobalStorage2.default(this.hash));
		    }
		    if (typeof _LocalStorage2.default !== "undefined") {
		      this.stores.push(new _LocalStorage2.default(this.hash));
		    }
		    if (typeof _SessionStorage2.default !== "undefined") {
		      this.stores.push(new _SessionStorage2.default(this.hash));
		    }
		    if (typeof _DOMStorage2.default !== "undefined") {
		      this.stores.push(new _DOMStorage2.default(this.hash));
		    }
		    for (var i = 0; i < this.stores.length; i++) {
		      if (!this.stores[i].isSupported()) {
		        this.stores.splice(i, 1);
		      }
		    }
		    /**
		     * Set self refresh flag
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Self refresh
		     */
		    if (this.isSupported()) {
		      this.refreshID = AnimationFrame.subscribe(this, this.refresh, []);
		    }
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.isSupported = function isSupported() {
		    return this.stores && this.stores.length > 0;
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.setItem = function setItem(checkSupport, key, value) {
		    /**
		     * Set result flag as true
		     * @type {boolean}
		     */
		    var booResult = true;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * Initialise store result array
		         * @type {Array}
		         */
		        var arResults = [];
		        /**
		         * Iterate through all supported stores
		         */
		        for (var _iterator = this.stores, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		          var _ref;
		
		          if (_isArray) {
		            if (_i >= _iterator.length) break;
		            _ref = _iterator[_i++];
		          } else {
		            _i = _iterator.next();
		            if (_i.done) break;
		            _ref = _i.value;
		          }
		
		          var store = _ref;
		
		          /**
		           * Write store operation result to result array
		           */
		          arResults.push(store.setItem(false, key, value));
		        }
		        /**
		         * If there exist result and one of them is true, it is means, that value was set
		         * @type {boolean}
		         */
		        booResult = arResults.length > 0 && arResults.indexOf(true) !== -1;
		      } else {
		        /**
		         * If stores does not supported, value can be set
		         * @type {boolean}
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  EverCookie.prototype.getItem = function getItem(checkSupport, key) {
		    /**
		     * Set result flag as true
		     * @type {boolean|string}
		     */
		    var booResult = false;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * Initialise temporary store result array
		         * @type {string[]}
		         */
		        var localArrResults = [];
		        /**
		         * Iterate through all supported stores
		         */
		        for (var _iterator2 = this.stores, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		          var _ref2;
		
		          if (_isArray2) {
		            if (_i2 >= _iterator2.length) break;
		            _ref2 = _iterator2[_i2++];
		          } else {
		            _i2 = _iterator2.next();
		            if (_i2.done) break;
		            _ref2 = _i2.value;
		          }
		
		          var store = _ref2;
		
		          var value = store.getItem(false, key);
		          /**
		           * If store has this value
		           */
		          if (value) {
		            /**
		             * Write store operation result to result array
		             */
		            localArrResults.push(value);
		          }
		        }
		        /**
		         * Initialise store result array
		         * @type {Object}
		         */
		        var arResults = {};
		        var numMax = 0;
		        /**
		         * Looking for the most frequently mentioned result
		         */
		        for (var _iterator3 = localArrResults, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
		          var _ref3;
		
		          if (_isArray3) {
		            if (_i3 >= _iterator3.length) break;
		            _ref3 = _iterator3[_i3++];
		          } else {
		            _i3 = _iterator3.next();
		            if (_i3.done) break;
		            _ref3 = _i3.value;
		          }
		
		          var i = _ref3;
		
		          if (!arResults[i]) {
		            arResults[i] = 0;
		          }
		          arResults[i]++;
		          if (arResults[i] > numMax) {
		            numMax = arResults[i];
		            booResult = i;
		          }
		        }
		      } else {
		        /**
		         * If stores does not supported, value can be set
		         * @type {boolean}
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.removeItem = function removeItem(checkSupport, key) {
		    /**
		     * Set result flag as true
		     * @type {boolean}
		     */
		    var booResult = true;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * Initialise store result counter
		         * @type {number}
		         */
		        var arResult = 0;
		        /**
		         * Iterate through all supported stores
		         */
		        for (var _iterator4 = this.stores, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
		          var _ref4;
		
		          if (_isArray4) {
		            if (_i4 >= _iterator4.length) break;
		            _ref4 = _iterator4[_i4++];
		          } else {
		            _i4 = _iterator4.next();
		            if (_i4.done) break;
		            _ref4 = _i4.value;
		          }
		
		          var store = _ref4;
		
		          /**
		           * If store supported (Not required, the stores is checked during initialization)
		           */
		          arResult += 1 * store.removeItem(false, key);
		        }
		        /**
		         * If removed count equal to stores count
		         * @type {boolean}
		         */
		        booResult = arResult === this.stores.length;
		      } else {
		        /**
		         * If stores does not supported, value can be set
		         * @type {boolean}
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  EverCookie.prototype.getKeys = function getKeys(checkSupport) {
		    /**
		     * Set result flag as true
		     * @type {Object}
		     */
		    var booResult = {};
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * Iterate through all supported stores
		         */
		        for (var _iterator5 = this.stores, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
		          var _ref5;
		
		          if (_isArray5) {
		            if (_i5 >= _iterator5.length) break;
		            _ref5 = _iterator5[_i5++];
		          } else {
		            _i5 = _iterator5.next();
		            if (_i5.done) break;
		            _ref5 = _i5.value;
		          }
		
		          var store = _ref5;
		
		          var value = store.getKeys(false);
		          if (value.length > 0) {
		            for (var _iterator6 = value, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
		              var _ref6;
		
		              if (_isArray6) {
		                if (_i6 >= _iterator6.length) break;
		                _ref6 = _iterator6[_i6++];
		              } else {
		                _i6 = _iterator6.next();
		                if (_i6.done) break;
		                _ref6 = _i6.value;
		              }
		
		              var i = _ref6;
		
		              booResult[i] = true;
		            }
		          }
		        }
		      } else {
		        /**
		         * If stores does not supported, value can be set
		         * @type {Object}
		         */
		        booResult = {};
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {Object}
		       */
		      booResult = {};
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return Object.keys(booResult);
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.clear = function clear(checkSupport) {
		    /**
		     * Set result flag as true
		     * @type {boolean}
		     */
		    var booResult = true;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * Initialise store result counter
		         * @type {number}
		         */
		        var arResult = 0;
		        /**
		         * Iterate through all supported stores
		         */
		        for (var _iterator7 = this.stores, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
		          var _ref7;
		
		          if (_isArray7) {
		            if (_i7 >= _iterator7.length) break;
		            _ref7 = _iterator7[_i7++];
		          } else {
		            _i7 = _iterator7.next();
		            if (_i7.done) break;
		            _ref7 = _i7.value;
		          }
		
		          var store = _ref7;
		
		          arResult += 1 * store.clear(false);
		        }
		        /**
		         * If removed count equal to stores count
		         * @type {boolean}
		         */
		        booResult = arResult === this.stores.length;
		      } else {
		        /**
		         * If stores does not supported, value can be set
		         * @type {boolean}
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * Self refresh
		   */
		
		
		  EverCookie.prototype.refresh = function refresh() {
		    if (!this.stopRefresh) {
		      var arrKeys = this.getKeys(false);
		      for (var _iterator8 = arrKeys, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
		        var _ref8;
		
		        if (_isArray8) {
		          if (_i8 >= _iterator8.length) break;
		          _ref8 = _iterator8[_i8++];
		        } else {
		          _i8 = _iterator8.next();
		          if (_i8.done) break;
		          _ref8 = _i8.value;
		        }
		
		        var key = _ref8;
		
		        var value = this.getItem(false, key);
		        /**
		         * Iterate through all supported stores
		         */
		        for (var _iterator9 = this.stores, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
		          var _ref9;
		
		          if (_isArray9) {
		            if (_i9 >= _iterator9.length) break;
		            _ref9 = _iterator9[_i9++];
		          } else {
		            _i9 = _iterator9.next();
		            if (_i9.done) break;
		            _ref9 = _i9.value;
		          }
		
		          var store = _ref9;
		
		          if (value !== store.getItem(false, key)) {
		            store.setItem(false, key, value.toString());
		          }
		        }
		      }
		    }
		  };
		  /**
		   * Stop every cookie
		   */
		
		
		  EverCookie.prototype.destroy = function destroy() {
		    AnimationFrame.unsubscribe(this.refreshID);
		    this.stopRefresh = true;
		    this.refresh = function () {
		      return null;
		    };
		    this.stores = [];
		    return true;
		  };
		
		  return EverCookie;
		}();
		
		exports.default = EverCookie;
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _Utils = __webpack_require__(4);
		
		var _Utils2 = _interopRequireDefault(_Utils);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		/**
		 * The document cookies storage
		 */
		var Cookies = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function Cookies(hash) {
		    _classCallCheck(this, Cookies);
		
		    this.hash = hash || location.hostname;
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  Cookies.prototype.isSupported = function isSupported() {
		    return _Utils2.default.Cookie.isSupported();
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @param expires {number}
		   * @param path {string}
		   * @param domain {string}
		   * @param secure {boolean}
		   * @return {boolean}
		   */
		
		
		  Cookies.prototype.setItem = function setItem(checkSupport, key, value) {
		    var expires = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;
		    var path = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "/";
		    var domain = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : location.hostname;
		    var secure = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : location.protocol === "https:";
		
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Save cookies for 30 days
		         * @type {Date}
		         */
		        var date = new Date();
		        date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);
		        var exp = date.toUTCString();
		        /**
		         * Encode value for store
		         * @type {string}
		         */
		        value = encodeURIComponent(value);
		        /**
		         * Writing value to the document cookie storage
		         * @type {string}
		         */
		        document.cookie = localKey + "=" + value + (exp ? "; expires=" + exp : "") + (path ? "; path=" + path : "") + (domain ? "; domain=" + domain : "") + (secure ? "; secure" : "");
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === value;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  Cookies.prototype.getItem = function getItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        key = this.hash + "_" + key;
		        /**
		         * Get the array from document cookie split by ;
		         * @type {string[]}
		         */
		        var arrCookie = document.cookie.split(";");
		        /**
		         * Iterate through the cookies
		         */
		        for (var _iterator = arrCookie, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		          var _ref;
		
		          if (_isArray) {
		            if (_i >= _iterator.length) break;
		            _ref = _iterator[_i++];
		          } else {
		            _i = _iterator.next();
		            if (_i.done) break;
		            _ref = _i.value;
		          }
		
		          var i = _ref;
		
		          /**
		           * Trim and split each cookie by = for key value pare
		           * @type {string[]}
		           */
		          var v = i.trim().split("=", 2);
		          /**
		           * If it is correct cookie key return the value
		           */
		          if (v[0] === key) {
		            /**
		             * If the value was found return the value
		             */
		            return decodeURIComponent(v[1]);
		          }
		        }
		        /**
		         * If the value was not found return false
		         */
		        return false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  Cookies.prototype.removeItem = function removeItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * Set empty overdue value by key
		         */
		        this.setItem(checkSupport, key, "", -1);
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  Cookies.prototype.getKeys = function getKeys(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The array of available keys
		         * @type {Array}
		         */
		        var arrKeys = [];
		        /**
		         * Get the array from document cookie split by ;
		         * @type {string[]}
		         */
		        var arrCookie = document.cookie.split(";");
		        /**
		         * Iterate through the cookies
		         */
		        for (var _iterator2 = arrCookie, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		          var _ref2;
		
		          if (_isArray2) {
		            if (_i2 >= _iterator2.length) break;
		            _ref2 = _iterator2[_i2++];
		          } else {
		            _i2 = _iterator2.next();
		            if (_i2.done) break;
		            _ref2 = _i2.value;
		          }
		
		          var i = _ref2;
		
		          /**
		           * Trim and split each cookie by = for key value pare
		           * @type {string[]}
		           */
		          var v = i.trim().split("=", 2);
		          /**
		           * If the key contains hash add it to the list
		           */
		          if (v[0].indexOf(this.hash) === 0) {
		            /**
		             * Add key to the list
		             */
		            arrKeys.push(v[0].substr(this.hash.length + 1));
		          }
		        }
		        return arrKeys;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  Cookies.prototype.clear = function clear(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        var arrKeys = this.getKeys(checkSupport);
		        if (arrKeys) {
		          for (var _iterator3 = arrKeys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
		            var _ref3;
		
		            if (_isArray3) {
		              if (_i3 >= _iterator3.length) break;
		              _ref3 = _iterator3[_i3++];
		            } else {
		              _i3 = _iterator3.next();
		              if (_i3.done) break;
		              _ref3 = _i3.value;
		            }
		
		            var i = _ref3;
		
		            this.removeItem(checkSupport, i);
		          }
		        }
		        /**
		         * If all ok return true
		         */
		        return this.getKeys(checkSupport).length === 0;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return true;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return Cookies;
		}();
		
		exports.default = Cookies;
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _UtilsBrowser = __webpack_require__(5);
		
		var _UtilsBrowser2 = _interopRequireDefault(_UtilsBrowser);
		
		var _UtilsCookie = __webpack_require__(6);
		
		var _UtilsCookie2 = _interopRequireDefault(_UtilsCookie);
		
		var _UtilsDocument = __webpack_require__(7);
		
		var _UtilsDocument2 = _interopRequireDefault(_UtilsDocument);
		
		var _UtilsDOM = __webpack_require__(8);
		
		var _UtilsDOM2 = _interopRequireDefault(_UtilsDOM);
		
		var _UtilsScreen = __webpack_require__(9);
		
		var _UtilsScreen2 = _interopRequireDefault(_UtilsScreen);
		
		var _UtilsSystem = __webpack_require__(10);
		
		var _UtilsSystem2 = _interopRequireDefault(_UtilsSystem);
		
		var _UtilsUser = __webpack_require__(11);
		
		var _UtilsUser2 = _interopRequireDefault(_UtilsUser);
		
		var _UtilsWindow = __webpack_require__(12);
		
		var _UtilsWindow2 = _interopRequireDefault(_UtilsWindow);
		
		var _Logger = __webpack_require__(13);
		
		var _Logger2 = _interopRequireDefault(_Logger);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		/**
		 * Global Utils class
		 */
		var Utils = function () {
		    function Utils() {
		        _classCallCheck(this, Utils);
		    }
		
		    /**
		     * @deprecated Utils.getBoundingClientRect method was deprecated and soon will be removed. Please use Utils.DOM.getBoundingClientRect method.
		     */
		    Utils.getBoundingClientRect = function getBoundingClientRect(domNode) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		        var showForce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		
		        _Logger2.default.log(401, "Utils.getBoundingClientRect method was deprecated and soon will be removed. Please use Utils.DOM.getBoundingClientRect method.");
		        return Utils.DOM.getBoundingClientRect(domNode, domDocument, showForce);
		    };
		
		    /**
		     * @deprecated Utils.findElementPosition method was deprecated and soon will be removed. Please use Utils.DOM.findElementPosition method.
		     */
		    Utils.findElementPosition = function findElementPosition(domNode) {
		        var showForce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		
		        _Logger2.default.log(401, "Utils.findElementPosition method was deprecated and soon will be removed. Please use Utils.DOM.findElementPosition method.");
		        return Utils.DOM.findElementPosition(domNode, showForce);
		    };
		    /**
		     * Transfer static methods into the object
		     * @param realObject
		     */
		
		
		    Utils.implementationStaticMethods = function implementationStaticMethods(realObject) {
		        var staticClass = realObject.constructor;
		        var methods = Object.keys(staticClass);
		        if (methods.length > 0) {
		            var _loop = function _loop() {
		                if (_isArray) {
		                    if (_i >= _iterator.length) return "break";
		                    _ref = _iterator[_i++];
		                } else {
		                    _i = _iterator.next();
		                    if (_i.done) return "break";
		                    _ref = _i.value;
		                }
		
		                var method = _ref;
		
		                if (typeof realObject[method] === "undefined") {
		                    realObject[method] = function () {
		                        _Logger2.default.log(401, "That method was deprecated and soon will be removed. Please use " + staticClass.name + "." + method + " method.");
		                        return staticClass[method].apply(staticClass, arguments);
		                    };
		                }
		            };
		
		            for (var _iterator = methods, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                var _ref;
		
		                var _ret = _loop();
		
		                if (_ret === "break") break;
		            }
		        }
		    };
		    /**
		     * Get call stack trace
		     * @return Array<Object>
		     */
		
		
		    Utils.stack = function stack() {
		        var e = new Error();
		        return e && e.stack && e.stack.split("\n").slice(5).map(function (s) {
		            var match = void 0;
		            if (!s) {
		                return {};
		            }
		            match = /^(.*)@(.*)\.js:([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                if (match[1]) {
		                    match[1] = /([^\/<]+)/ig.exec(match[1]);
		                    if (match[1]) {
		                        match[1] = match[1][0];
		                    }
		                }
		                return {
		                    column: match[4] || "",
		                    file: match[2] || "",
		                    line: match[3] || "",
		                    method: match[1] || ""
		                };
		            }
		            match = /^(.*)@(http|https):([^:]+):([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[5] || "",
		                    file: match[3] || "",
		                    line: match[4] || "",
		                    method: match[1] + ":" + match[2] || ""
		                };
		            }
		            match = /^(.*)@(.*):([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[4] || "",
		                    file: match[2] || "",
		                    line: match[3] || "",
		                    method: match[1] || ""
		                };
		            }
		            match = /^\s+at\s([^(]+)\s\((.*):([0-9]+):([0-9]+)\)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[4] || "",
		                    file: match[2] || "",
		                    line: match[3] || "",
		                    method: match[1] || ""
		                };
		            }
		            match = /^\s+at\s(.*):([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[3] || "",
		                    file: match[1] || "",
		                    line: match[2] || "",
		                    method: ""
		                };
		            }
		            return s;
		        }) || [];
		    };
		    /**
		     * Get random ID
		     * @return {string}
		     */
		
		
		    Utils.getUID = function getUID() {
		        return Math.random().toString(36).substring(2);
		    };
		
		    return Utils;
		}();
		
		Utils.Browser = _UtilsBrowser2.default;
		Utils.Cookie = _UtilsCookie2.default;
		Utils.DOM = _UtilsDOM2.default;
		Utils.Document = _UtilsDocument2.default;
		Utils.Screen = _UtilsScreen2.default;
		Utils.System = _UtilsSystem2.default;
		Utils.User = _UtilsUser2.default;
		Utils.Window = _UtilsWindow2.default;
		window.Utils = Utils;
		exports.default = Utils;
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with browser
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Browser = function () {
		    function Browser() {
		        _classCallCheck(this, Browser);
		    }
		
		    /**
		     * Get browser info
		     * @return {{browser: string, mobile: boolean, version: string}}
		     */
		    Browser.getInfo = function getInfo() {
		        return {
		            browser: Browser.getName(),
		            mobile: Browser.isMobile(),
		            version: Browser.getVersion()
		        };
		    };
		    /**
		     * Get browser name
		     * @return {string}
		     */
		
		
		    Browser.getName = function getName() {
		        var browser = void 0;
		        if (Browser.isOpera()) {
		            browser = "Opera";
		        } else if (Browser.isOperaNew()) {
		            browser = "Opera";
		        } else if (Browser.isMSIE()) {
		            browser = "Microsoft Internet Explorer";
		        } else if (Browser.isMSIENew()) {
		            browser = "Microsoft Internet Explorer";
		        } else if (Browser.isChrome()) {
		            browser = "Chrome";
		        } else if (Browser.isFirefox()) {
		            browser = "Firefox";
		        } else if (Browser.isSafari()) {
		            browser = "Safari";
		        } else if (Browser.isOther()) {
		            browser = Browser.getOtherName();
		        }
		        return browser;
		    };
		    /**
		     * Get browser version
		     * @return {string}
		     */
		
		
		    Browser.getVersion = function getVersion() {
		        var version = void 0;
		        if (Browser.isOpera()) {
		            version = Browser.getOperaVersion();
		        } else if (Browser.isOperaNew()) {
		            version = Browser.getOperaNewVersion();
		        } else if (Browser.isMSIE()) {
		            version = Browser.getMSIEVersion();
		        } else if (Browser.isMSIENew()) {
		            version = Browser.getMSIENewVersion();
		        } else if (Browser.isChrome()) {
		            version = Browser.getChromeVersion();
		        } else if (Browser.isFirefox()) {
		            version = Browser.getFirefoxVersion();
		        } else if (Browser.isSafari()) {
		            version = Browser.getSafariVersion();
		        } else if (Browser.isOther()) {
		            version = Browser.getOtherVersion();
		        }
		        return version;
		    };
		    /**
		     * Trim browser version
		     * @param version
		     * @return {string}
		     */
		
		
		    Browser.trimVersion = function trimVersion(version) {
		        var chars = [";", " ", ")"];
		        for (var _iterator = chars, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		                if (_i >= _iterator.length) break;
		                _ref = _iterator[_i++];
		            } else {
		                _i = _iterator.next();
		                if (_i.done) break;
		                _ref = _i.value;
		            }
		
		            var char = _ref;
		
		            var ix = version.indexOf(char);
		            if (ix !== -1) {
		                version = version.substring(0, ix);
		            }
		        }
		        return version;
		    };
		    /**
		     * Check if it is mobile
		     * @return {boolean}
		     */
		
		
		    Browser.isMobile = function isMobile() {
		        return (/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(navigator.appVersion)
		        );
		    };
		    /**
		     * Check if it is opera browser
		     * @return {boolean}
		     */
		
		
		    Browser.isOpera = function isOpera() {
		        return navigator.userAgent.indexOf("Opera") !== -1;
		    };
		    /**
		     * Get opera browser version
		     * @return {string}
		     */
		
		
		    Browser.getOperaVersion = function getOperaVersion() {
		        var verOffset = navigator.userAgent.indexOf("Opera");
		        var version = navigator.userAgent.substring(verOffset + 6);
		        verOffset = navigator.userAgent.indexOf("Version");
		        if (verOffset !== -1) {
		            version = navigator.userAgent.substring(verOffset + 8);
		        }
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is opera new browser
		     * @return {boolean}
		     */
		
		
		    Browser.isOperaNew = function isOperaNew() {
		        return navigator.userAgent.indexOf("OPR") !== -1;
		    };
		    /**
		     * Get opera new browser version
		     * @return {string}
		     */
		
		
		    Browser.getOperaNewVersion = function getOperaNewVersion() {
		        var verOffset = navigator.userAgent.indexOf("OPR");
		        var version = navigator.userAgent.substring(verOffset + 4);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is msie browser
		     * @return {boolean}
		     */
		
		
		    Browser.isMSIE = function isMSIE() {
		        return navigator.userAgent.indexOf("MSIE") !== -1;
		    };
		    /**
		     * Get msie browser version
		     * @return {string}
		     */
		
		
		    Browser.getMSIEVersion = function getMSIEVersion() {
		        var verOffset = navigator.userAgent.indexOf("MSIE");
		        var version = navigator.userAgent.substring(verOffset + 5);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is msie new browser
		     * @return {boolean}
		     */
		
		
		    Browser.isMSIENew = function isMSIENew() {
		        return navigator.userAgent.indexOf("Trident/") !== -1;
		    };
		    /**
		     * Get msie new browser version
		     * @return {string}
		     */
		
		
		    Browser.getMSIENewVersion = function getMSIENewVersion() {
		        var version = navigator.userAgent.substring(navigator.userAgent.indexOf("rv:") + 3);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is chrome browser
		     * @return {boolean}
		     */
		
		
		    Browser.isChrome = function isChrome() {
		        return navigator.userAgent.indexOf("Chrome") !== -1;
		    };
		    /**
		     * Get chrome browser version
		     * @return {string}
		     */
		
		
		    Browser.getChromeVersion = function getChromeVersion() {
		        var verOffset = navigator.userAgent.indexOf("Chrome");
		        var version = navigator.userAgent.substring(verOffset + 7);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is safari browser
		     * @return {boolean}
		     */
		
		
		    Browser.isSafari = function isSafari() {
		        return navigator.userAgent.indexOf("Safari") !== -1;
		    };
		    /**
		     * Get safari browser version
		     * @return {string}
		     */
		
		
		    Browser.getSafariVersion = function getSafariVersion() {
		        var verOffset = navigator.userAgent.indexOf("Safari");
		        var version = navigator.userAgent.substring(verOffset + 7);
		        verOffset = navigator.userAgent.indexOf("Version");
		        if (verOffset !== -1) {
		            version = navigator.userAgent.substring(verOffset + 8);
		        }
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is firefox browser
		     * @return {boolean}
		     */
		
		
		    Browser.isFirefox = function isFirefox() {
		        return navigator.userAgent.indexOf("Firefox") !== -1;
		    };
		    /**
		     * Get firefox browser version
		     * @return {string}
		     */
		
		
		    Browser.getFirefoxVersion = function getFirefoxVersion() {
		        var verOffset = navigator.userAgent.indexOf("Firefox");
		        var version = navigator.userAgent.substring(verOffset + 8);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is other browser
		     * @return {boolean}
		     */
		
		
		    Browser.isOther = function isOther() {
		        var nameOffset = navigator.userAgent.lastIndexOf(" ") + 1;
		        var verOffset = navigator.userAgent.lastIndexOf("/");
		        return nameOffset < verOffset;
		    };
		    /**
		     * Get other browser name
		     * @return {string}
		     */
		
		
		    Browser.getOtherName = function getOtherName() {
		        var nameOffset = navigator.userAgent.lastIndexOf(" ") + 1;
		        var verOffset = navigator.userAgent.lastIndexOf("/");
		        var browser = navigator.userAgent.substring(nameOffset, verOffset);
		        if (browser.toLowerCase() === browser.toUpperCase()) {
		            browser = navigator.appName;
		        }
		        return browser;
		    };
		    /**
		     * Get other browser version
		     * @return {string}
		     */
		
		
		    Browser.getOtherVersion = function getOtherVersion() {
		        var nameOffset = navigator.userAgent.lastIndexOf(" ") + 1;
		        var verOffset = navigator.userAgent.lastIndexOf("/");
		        var version = navigator.userAgent.substring(verOffset + 1);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check browser support
		     * @return {boolean}
		     */
		
		
		    Browser.isSupported = function isSupported() {
		        return !Browser.isMSIE() || parseInt(Browser.getMSIEVersion(), 10) > 8;
		    };
		    /**
		     * Check if it is WebKit browser
		     * @return {boolean}
		     */
		
		
		    Browser.isWebKit = function isWebKit() {
		        return navigator.userAgent.indexOf("AppleWebKit/") !== -1;
		    };
		    /**
		     * Check if it is Gecko browser
		     * @return {boolean}
		     */
		
		
		    Browser.isGecko = function isGecko() {
		        return navigator.userAgent.indexOf("Gecko") > -1 && navigator.userAgent.indexOf("KHTML") === -1;
		    };
		    /**
		     * Check if it is Android browser
		     * @return {boolean}
		     */
		
		
		    Browser.isAndroid = function isAndroid() {
		        return navigator.userAgent.indexOf("Android") > -1;
		    };
		    /**
		     * Check if it is Linux browser
		     * @return {boolean}
		     */
		
		
		    Browser.isLinux = function isLinux() {
		        return navigator.userAgent.indexOf("Linux") > -1;
		    };
		    /**
		     * Check if it is iPad browser
		     * @return {boolean}
		     */
		
		
		    Browser.isTabletPC = function isTabletPC() {
		        return navigator.userAgent.indexOf("iPad") > -1;
		    };
		
		    return Browser;
		}();
		
		exports.default = Browser;
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with cookie
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Cookie = function () {
		  function Cookie() {
		    _classCallCheck(this, Cookie);
		  }
		
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		  Cookie.isSupported = function isSupported() {
		    return (typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && typeof document.cookie === "string";
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @param expires {number}
		   * @param path {string}
		   * @param domain {string}
		   * @param secure {boolean}
		   * @return {boolean}
		   */
		
		
		  Cookie.setItem = function setItem(checkSupport, key, value) {
		    var expires = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;
		    var path = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "/";
		    var domain = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : location.hostname;
		    var secure = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : location.protocol === "https:";
		
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || Cookie.isSupported()) {
		        /**
		         * Save cookies for 30 days
		         * @type {Date}
		         */
		        var date = new Date();
		        date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);
		        var exp = date.toUTCString();
		        /**
		         * Encode value for store
		         * @type {string}
		         */
		        value = encodeURIComponent(value);
		        /**
		         * Writing value to the document cookie storage
		         * @type {string}
		         */
		        document.cookie = key + "=" + value + (exp ? "; expires=" + exp : "") + (path ? "; path=" + path : "") + (domain ? "; domain=" + domain : "") + (secure ? "; secure" : "");
		        /**
		         * If all ok return true
		         */
		        return Cookie.getItem(checkSupport, key) === value;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  Cookie.getItem = function getItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || Cookie.isSupported()) {
		        /**
		         * Get the array from document cookie split by ;
		         * @type {string[]}
		         */
		        var arrCookie = document.cookie.split(";");
		        /**
		         * Iterate through the cookies
		         */
		        for (var _iterator = arrCookie, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		          var _ref;
		
		          if (_isArray) {
		            if (_i >= _iterator.length) break;
		            _ref = _iterator[_i++];
		          } else {
		            _i = _iterator.next();
		            if (_i.done) break;
		            _ref = _i.value;
		          }
		
		          var i = _ref;
		
		          /**
		           * Trim and split each cookie by = for key value pare
		           * @type {string[]}
		           */
		          var v = i.trim().split("=", 2);
		          /**
		           * If it is correct cookie key return the value
		           */
		          if (v[0] === key) {
		            /**
		             * If the value was found return the value
		             */
		            return decodeURIComponent(v[1]);
		          }
		        }
		        /**
		         * If the value was not found return false
		         */
		        return false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  Cookie.removeItem = function removeItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || Cookie.isSupported()) {
		        /**
		         * Set empty overdue value by key
		         */
		        Cookie.setItem(checkSupport, key, "", -1);
		        /**
		         * If all ok return true
		         */
		        return Cookie.getItem(checkSupport, key) === false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  Cookie.getKeys = function getKeys(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || Cookie.isSupported()) {
		        /**
		         * The array of available keys
		         * @type {Array}
		         */
		        var arrKeys = [];
		        /**
		         * Get the array from document cookie split by ;
		         * @type {string[]}
		         */
		        var arrCookie = document.cookie.split(";");
		        /**
		         * Iterate through the cookies
		         */
		        for (var _iterator2 = arrCookie, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		          var _ref2;
		
		          if (_isArray2) {
		            if (_i2 >= _iterator2.length) break;
		            _ref2 = _iterator2[_i2++];
		          } else {
		            _i2 = _iterator2.next();
		            if (_i2.done) break;
		            _ref2 = _i2.value;
		          }
		
		          var i = _ref2;
		
		          /**
		           * Trim and split each cookie by = for key value pare
		           * @type {string[]}
		           */
		          var v = i.trim().split("=", 2);
		          /**
		           * Add key to the list
		           */
		          arrKeys.push(v[0]);
		        }
		        return arrKeys;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  Cookie.clear = function clear(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || Cookie.isSupported()) {
		        var arrKeys = Cookie.getKeys(checkSupport);
		        if (arrKeys) {
		          for (var _iterator3 = arrKeys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
		            var _ref3;
		
		            if (_isArray3) {
		              if (_i3 >= _iterator3.length) break;
		              _ref3 = _iterator3[_i3++];
		            } else {
		              _i3 = _iterator3.next();
		              if (_i3.done) break;
		              _ref3 = _i3.value;
		            }
		
		            var i = _ref3;
		
		            Cookie.removeItem(checkSupport, i);
		          }
		        }
		        /**
		         * If all ok return true
		         */
		        return Cookie.getKeys(checkSupport).length === 0;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return true;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return Cookie;
		}();
		
		exports.default = Cookie;
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with document
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Document = function () {
		    function Document() {
		        _classCallCheck(this, Document);
		    }
		
		    /**
		     * Get document height
		     * @returns {number}
		     */
		    Document.getHeight = function getHeight() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return Math.max(objWindow.document.body.scrollHeight, objWindow.document.documentElement.scrollHeight, objWindow.document.body.offsetHeight, objWindow.document.documentElement.offsetHeight, objWindow.document.body.clientHeight, objWindow.document.documentElement.clientHeight);
		    };
		    /**
		     * Get document width
		     * @returns {number}
		     */
		
		
		    Document.getWidth = function getWidth() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return Math.max(objWindow.document.body.scrollWidth, objWindow.document.documentElement.scrollWidth, objWindow.document.body.offsetWidth, objWindow.document.documentElement.offsetWidth, objWindow.document.body.clientWidth, objWindow.document.documentElement.clientWidth);
		    };
		    /**
		     * Get document top scroll
		     * @param objWindow
		     * @return {number}
		     */
		
		
		    Document.getScrollTop = function getScrollTop() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return objWindow.pageYOffset || objWindow.document.documentElement && objWindow.document.documentElement.scrollTop || objWindow.document.body && objWindow.document.body.scrollTop;
		    };
		    /**
		     * Get document left scroll
		     * @param objWindow
		     * @return {number}
		     */
		
		
		    Document.getScrollLeft = function getScrollLeft() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return objWindow.pageXOffset || objWindow.document.documentElement && objWindow.document.documentElement.scrollLeft || objWindow.document.body && objWindow.document.body.scrollLeft;
		    };
		    /**
		     * Get document scrolls
		     * @param objWindow
		     * @return {{left: number, top: number}}
		     */
		
		
		    Document.getScroll = function getScroll() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return {
		            left: Document.getScrollLeft(objWindow),
		            top: Document.getScrollTop(objWindow)
		        };
		    };
		
		    return Document;
		}();
		
		exports.default = Document;
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with DOM
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var DOM = function () {
		    function DOM() {
		        _classCallCheck(this, DOM);
		    }
		
		    /**
		     * Get element sizes and position
		     * @param domNode
		     * @param domDocument
		     * @param showForce
		     * @return {{bottom: number, height: number, left: number, right: number, top: number, width: number}}
		     */
		    DOM.getBoundingClientRect = function getBoundingClientRect(domNode) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		        var showForce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		
		        if (typeof domNode === "string") {
		            domNode = domDocument.getElementById(domNode);
		        }
		        var styles = void 0;
		        if (showForce) {
		            styles = getComputedStyle(domNode);
		            if (styles && styles.display === "none") {
		                domNode.style.display = "block";
		            }
		        }
		        var objRet = {
		            bottom: 0,
		            height: 0,
		            left: 0,
		            right: 0,
		            top: 0,
		            width: 0
		        };
		        if (domNode) {
		            /**
		             * If default method is supported than use it
		             */
		            if (domNode.getBoundingClientRect) {
		                objRet = domNode.getBoundingClientRect();
		                /**
		                 * IE hack
		                 */
		                objRet = {
		                    bottom: objRet.bottom,
		                    height: objRet.height || domNode.clientHeight,
		                    left: objRet.left,
		                    right: objRet.right,
		                    top: objRet.top,
		                    width: objRet.width || domNode.clientWidth
		                };
		            } else {
		                /**
		                 * Write the element in a temporary variable
		                 */
		                var domElement = domNode;
		                /**
		                 * Calculated basic parameters of the element
		                 * @type {Object}
		                 */
		                var objCoordinates = {
		                    height: domElement.offsetHeight,
		                    width: domElement.offsetWidth,
		                    x: 0,
		                    y: 0
		                };
		                /**
		                 * Are passed on to all parents and take into account their offsets
		                 */
		                while (domElement) {
		                    objCoordinates.x += domElement.offsetLeft;
		                    objCoordinates.y += domElement.offsetTop;
		                    domElement = domElement.offsetParent;
		                }
		                /**
		                 *
		                 * @type {Object}
		                 */
		                objRet = {
		                    bottom: objCoordinates.y + objCoordinates.height,
		                    height: objCoordinates.height,
		                    left: objCoordinates.x,
		                    right: objCoordinates.x + objCoordinates.width,
		                    top: objCoordinates.y,
		                    width: objCoordinates.width
		                };
		            }
		        }
		        if (showForce && domNode) {
		            domNode.style.display = "";
		        }
		        /**
		         * Return size and position of the element
		         */
		        return objRet;
		    };
		
		    /**
		     * Find element position
		     * @param domNode
		     * @param showForce
		     * @return {{top: number, left: number}}
		     */
		    DOM.findElementPosition = function findElementPosition(domNode) {
		        var showForce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		
		        var left = 0;
		        var top = 0;
		        while (domNode) {
		            var styles = void 0;
		            if (showForce) {
		                styles = getComputedStyle(domNode);
		                if (styles && styles.display === "none") {
		                    domNode.style.display = "block";
		                }
		            }
		            left += domNode.offsetLeft;
		            top += domNode.offsetTop;
		            domNode = domNode.offsetParent;
		            if (showForce && domNode) {
		                domNode.style.display = "";
		            }
		        }
		        return {
		            top: top,
		            left: left
		        };
		    };
		    /**
		     * Add event listener
		     * @param obj
		     * @param name
		     * @param func
		     */
		
		
		    DOM.addEvent = function addEvent(obj, name, func) {
		        if (obj.addEventListener) {
		            obj.addEventListener(name, func, false);
		        } else if (obj.attachEvent) {
		            obj.attachEvent("on" + name, func);
		        }
		    };
		    /**
		     * Remove event listener
		     * @param obj
		     * @param name
		     * @param func
		     */
		
		
		    DOM.removeEvent = function removeEvent(obj, name, func) {
		        if (obj.removeEventListener) {
		            obj.removeEventListener(name, func, false);
		        } else if (obj.detachEvent) {
		            obj.detachEvent("on" + name, func);
		        }
		    };
		    /**
		     * Check if element has class name
		     * @param element
		     * @param className
		     * @return {boolean}
		     */
		
		
		    DOM.hasClassName = function hasClassName(element, className) {
		        return (" " + element.className + " ").indexOf(" " + className + " ") !== -1;
		    };
		    /**
		     * Add class name
		     * @param element
		     * @param className
		     * @return {HTMLElement}
		     */
		
		
		    DOM.addClassName = function addClassName(element, className) {
		        if (!DOM.hasClassName(element, className)) {
		            var cl = element.className;
		            element.className = cl ? cl + " " + className : className;
		        }
		        return element;
		    };
		    /**
		     * Remove class name
		     * @param element
		     * @param className
		     * @return {HTMLElement}
		     */
		
		
		    DOM.removeClassName = function removeClassName(element, className) {
		        var classes = element.className.split(" ");
		        for (var i = classes.length - 1; i >= 0; i--) {
		            if (classes[i] === className) {
		                classes.splice(i, 1);
		            }
		        }
		        element.className = classes.join(" ");
		        return element;
		    };
		    /**
		     * Toggle class name
		     * @param element
		     * @param className
		     * @param toggle
		     * @return {HTMLElement}
		     */
		
		
		    DOM.toggleClassName = function toggleClassName(element, className, toggle) {
		        if (toggle) {
		            DOM.addClassName(element, className);
		        } else {
		            DOM.removeClassName(element, className);
		        }
		        return element;
		    };
		    /**
		     * Replace class name
		     * @param element
		     * @param oldClassName
		     * @param newClassName
		     * @return {HTMLElement}
		     */
		
		
		    DOM.replaceClass = function replaceClass(element, oldClassName, newClassName) {
		        DOM.removeClassName(element, oldClassName);
		        DOM.addClassName(element, newClassName);
		        return element;
		    };
		    /**
		     * Get element by tag name and index
		     * @param tn
		     * @param context
		     * @param index
		     * @return {Node}
		     */
		
		
		    DOM.getElementByTagName = function getElementByTagName(tn, context, index) {
		        var cont = context || document;
		        var els = cont.getElementsByTagName(tn);
		        if (null == index || isNaN(index)) {
		            return undefined;
		        } else {
		            return els[index];
		        }
		    };
		
		    return DOM;
		}();
		
		exports.default = DOM;
	
	/***/ },
	/* 9 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with screen
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Screen = function () {
		    function Screen() {
		        _classCallCheck(this, Screen);
		    }
		
		    /**
		     * Get screen info
		     * @return {{availableSize: {height: number, width: number}, colorDepth: number, pixelRatio: number, size: {height: number, width: number}}}
		     */
		    Screen.getInfo = function getInfo() {
		        return {
		            availableSize: Screen.getAvailableSizes(),
		            colorDepth: Screen.getColorDepth(),
		            pixelRatio: Screen.getPixelRatio(),
		            size: Screen.getSizes()
		        };
		    };
		    /**
		     * Get screen height
		     * @returns {number}
		     */
		
		
		    Screen.getHeight = function getHeight() {
		        return screen.height;
		    };
		    /**
		     * Get screen width
		     * @returns {number}
		     */
		
		
		    Screen.getWidth = function getWidth() {
		        return screen.width;
		    };
		    /**
		     * Get screen sizes
		     * @return {{height: number, width: number}}
		     */
		
		
		    Screen.getSizes = function getSizes() {
		        return {
		            height: Screen.getHeight(),
		            width: Screen.getWidth()
		        };
		    };
		    /**
		     * Get screen height
		     * @returns {number}
		     */
		
		
		    Screen.getAvailableHeight = function getAvailableHeight() {
		        return screen.availHeight;
		    };
		    /**
		     * Get screen width
		     * @returns {number}
		     */
		
		
		    Screen.getAvailableWidth = function getAvailableWidth() {
		        return screen.availWidth;
		    };
		    /**
		     * Get screen sizes
		     * @return {{height: number, width: number}}
		     */
		
		
		    Screen.getAvailableSizes = function getAvailableSizes() {
		        return {
		            height: Screen.getAvailableHeight(),
		            width: Screen.getAvailableWidth()
		        };
		    };
		    /**
		     * Get screen pixel ratio
		     * @return {number}
		     */
		
		
		    Screen.getPixelRatio = function getPixelRatio() {
		        var ratio = 1;
		        if (typeof window.screen.systemXDPI !== "undefined" && typeof window.screen.logicalXDPI !== "undefined" && window.screen.systemXDPI > window.screen.logicalXDPI) {
		            ratio = window.screen.systemXDPI / window.screen.logicalXDPI;
		        } else if (typeof window.devicePixelRatio !== "undefined") {
		            ratio = window.devicePixelRatio;
		        }
		        return ratio;
		    };
		    /**
		     * Get screen color depth
		     * @return {number}
		     */
		
		
		    Screen.getColorDepth = function getColorDepth() {
		        return screen.colorDepth;
		    };
		
		    return Screen;
		}();
		
		exports.default = Screen;
	
	/***/ },
	/* 10 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with system
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var System = function () {
		    function System() {
		        _classCallCheck(this, System);
		    }
		
		    /**
		     * Get system info
		     * @return {{name: string, version: string}}
		     */
		    System.getInfo = function getInfo() {
		        return {
		            name: System.getName(),
		            version: System.getVersion()
		        };
		    };
		    /**
		     * Get OS name
		     * @return {string}
		     */
		
		
		    System.getName = function getName() {
		        var os = "";
		        var clientStrings = [{
		            r: /(Windows 10.0|Windows NT 10.0)/,
		            s: "Windows 10"
		        }, {
		            r: /(Windows 8.1|Windows NT 6.3)/,
		            s: "Windows 8.1"
		        }, {
		            r: /(Windows 8|Windows NT 6.2)/,
		            s: "Windows 8"
		        }, {
		            r: /(Windows 7|Windows NT 6.1)/,
		            s: "Windows 7"
		        }, {
		            r: /Windows NT 6.0/,
		            s: "Windows Vista"
		        }, {
		            r: /Windows NT 5.2/,
		            s: "Windows Server 2003"
		        }, {
		            r: /(Windows NT 5.1|Windows XP)/,
		            s: "Windows XP"
		        }, {
		            r: /(Windows NT 5.0|Windows 2000)/,
		            s: "Windows 2000"
		        }, {
		            r: /(Win 9x 4.90|Windows ME)/,
		            s: "Windows ME"
		        }, {
		            r: /(Windows 98|Win98)/,
		            s: "Windows 98"
		        }, {
		            r: /(Windows 95|Win95|Windows_95)/,
		            s: "Windows 95"
		        }, {
		            r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/,
		            s: "Windows NT 4.0"
		        }, {
		            r: /Windows CE/,
		            s: "Windows CE"
		        }, {
		            r: /Win16/,
		            s: "Windows 3.11"
		        }, {
		            r: /Android/,
		            s: "Android"
		        }, {
		            r: /OpenBSD/,
		            s: "Open BSD"
		        }, {
		            r: /SunOS/,
		            s: "Sun OS"
		        }, {
		            r: /(Linux|X11)/,
		            s: "Linux"
		        }, {
		            r: /(iPhone|iPad|iPod)/,
		            s: "iOS"
		        }, {
		            r: /Mac OS X/,
		            s: "Mac OS X"
		        }, {
		            r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/,
		            s: "Mac OS"
		        }, {
		            r: /QNX/,
		            s: "QNX"
		        }, {
		            r: /UNIX/,
		            s: "UNIX"
		        }, {
		            r: /BeOS/,
		            s: "BeOS"
		        }, {
		            r: /OS\/2/,
		            s: "OS/2"
		        }, {
		            r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/,
		            s: "Search Bot"
		        }];
		        for (var _iterator = clientStrings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		                if (_i >= _iterator.length) break;
		                _ref = _iterator[_i++];
		            } else {
		                _i = _iterator.next();
		                if (_i.done) break;
		                _ref = _i.value;
		            }
		
		            var cs = _ref;
		
		            if (cs.r.test(navigator.userAgent)) {
		                os = cs.s;
		                break;
		            }
		        }
		        return os;
		    };
		    /**
		     * Get OS version
		     * @return {string}
		     */
		
		
		    System.getVersion = function getVersion() {
		        var os = System.getName();
		        var osVersion = "";
		        if (/Windows/.test(os)) {
		            osVersion = /Windows (.*)/.exec(os)[1];
		            os = "Windows";
		        }
		        switch (os) {
		            case "Mac OS X":
		                osVersion = /Mac OS X (10[._\d]+)/.exec(navigator.userAgent)[1];
		                break;
		            case "Android":
		                osVersion = /Android ([._\d]+)/.exec(navigator.userAgent)[1];
		                break;
		            case "iOS":
		                var reg = /OS (\d+)_(\d+)_?(\d+)?/.exec(navigator.appVersion);
		                osVersion = reg[1] + "." + reg[2] + "." + (reg[3] || 0);
		                break;
		            default:
		        }
		        return osVersion;
		    };
		
		    return System;
		}();
		
		exports.default = System;
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _UtilsBrowser = __webpack_require__(5);
		
		var _UtilsBrowser2 = _interopRequireDefault(_UtilsBrowser);
		
		var _UtilsScreen = __webpack_require__(9);
		
		var _UtilsScreen2 = _interopRequireDefault(_UtilsScreen);
		
		var _UtilsSystem = __webpack_require__(10);
		
		var _UtilsSystem2 = _interopRequireDefault(_UtilsSystem);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var User = function () {
		    function User() {
		        _classCallCheck(this, User);
		    }
		
		    /**
		     * Get user info
		     * @return {{browser: {browser: string, mobile: boolean, version: string}, screen: {availableSize: {height: number, width: number}, colorDepth: number, pixelRatio: number, size: {height: number, width: number}}, system: {name: string, version: string}}}
		     */
		    User.getInfo = function getInfo() {
		        return {
		            browser: _UtilsBrowser2.default.getInfo(),
		            screen: _UtilsScreen2.default.getInfo(),
		            system: _UtilsSystem2.default.getInfo()
		        };
		    };
		
		    return User;
		}();
		
		exports.default = User;
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with window
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Window = function () {
		    function Window() {
		        _classCallCheck(this, Window);
		    }
		
		    /**
		     * Get window height
		     * @returns {number}
		     */
		    Window.getHeight = function getHeight() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		    };
		    /**
		     * Get window width
		     * @returns {number}
		     */
		
		
		    Window.getWidth = function getWidth() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		    };
		    /**
		     * Get window sizes
		     * @return {{height: number, width: number}}
		     */
		
		
		    Window.getSizes = function getSizes() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return {
		            height: Window.getHeight(objWindow),
		            width: Window.getWidth(objWindow)
		        };
		    };
		
		    return Window;
		}();
		
		exports.default = Window;
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _Utils = __webpack_require__(4);
		
		var _Utils2 = _interopRequireDefault(_Utils);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var MD5 = __webpack_require__(14);
		/**
		 * Import Animation frame
		 */
		var AnimationFrame = __webpack_require__(16);
		
		var STATUSES = {
		    600: "Some uncaught error",
		    503: "Attempt reattach the scripts to the non-object",
		    502: "Block doesn't exist",
		    501: "Banner place doesn't exist",
		    500: "Some caught error",
		    401: "Deprecated call",
		    400: "Some warning",
		    300: "Some info",
		    200: "Some log",
		    101: "Entry point",
		    100: "Some debug",
		    0: "Something"
		};
		
		var Logger = function () {
		    function Logger() {
		        _classCallCheck(this, Logger);
		    }
		
		    /**
		     * Log method
		     * @param status
		     * @param message
		     * @param properties
		     */
		    Logger.log = function log(status, message, properties) {
		        status = status || 101;
		        message = message || STATUSES[status] || "";
		        properties = properties || {};
		        if (status >= 400) {
		            var logObj = {
		                date: new Date(),
		                location: location.href,
		                projectName: Logger.projectName,
		                projectVersion: Logger.projectVersion,
		                stack: _Utils2.default.stack(),
		                user: _Utils2.default.User.getInfo(),
		                message: message,
		                properties: properties,
		                status: status
		            };
		            Logger.arrLog.push(logObj);
		        }
		    };
		
		    Logger.showMessange = function showMessange() {
		        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
		        var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
		
		        var messangeLavel = "debug";
		        if (status >= 200 && status < 300) {
		            messangeLavel = "log";
		        } else if (status >= 300 && status < 400) {
		            messangeLavel = "info";
		        } else if (status >= 400 && status < 500) {
		            messangeLavel = "warn";
		        } else if (status >= 500) {
		            messangeLavel = "error";
		        }
		        if (_typeof(window.Debug) === "object" && _typeof(window.Debug.console) === "object" && typeof window.Debug.console[messangeLavel] === "function") {
		            window.Debug.console[messangeLavel](message);
		        } else if ((typeof console === "undefined" ? "undefined" : _typeof(console)) === "object" && typeof console[messangeLavel] === "function") {
		            console[messangeLavel](message);
		        }
		    };
		    /**
		     * Log send watcher
		     */
		
		
		    Logger.watch = function watch() {
		        if (Logger.arrLog.length > 0 && Logger.arrLog.length < 100) {
		            for (var _iterator = Logger.arrLog, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                var _ref;
		
		                if (_isArray) {
		                    if (_i >= _iterator.length) break;
		                    _ref = _iterator[_i++];
		                } else {
		                    _i = _iterator.next();
		                    if (_i.done) break;
		                    _ref = _i.value;
		                }
		
		                var l = _ref;
		
		                var data = encodeURIComponent(JSON.stringify(l));
		                var uid = MD5(JSON.stringify({
		                    message: l.message,
		                    projectName: l.projectName,
		                    projectVersion: l.projectVersion,
		                    status: l.status
		                })).toString();
		                if (Logger.arrSended.indexOf(uid) === -1) {
		                    Logger.arrSended.push(uid);
		                    if (false) {
		                        var i = new Image();
		                    } else {
		                        Logger.showMessange(l.status, l);
		                    }
		                }
		            }
		            Logger.arrLog = [];
		        }
		    };
		
		    return Logger;
		}();
		
		Logger.eventListenerAdded = false;
		Logger.arrLog = [];
		Logger.arrSended = [];
		Logger.projectName = "EverCookie";
		Logger.projectVersion = "1.0.0";
		/**
		 * Add logger to global error event
		 */
		if (!window.eventListenerAdded) {
		    (function () {
		        var errorHandler = window.onerror;
		        window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {
		            if (typeof errorHandler === "function") {
		                errorHandler(errorMsg, url, lineNumber, column, errorObj);
		            }
		            Logger.log(600, errorMsg, {
		                column: column,
		                errorObj: errorObj,
		                lineNumber: lineNumber,
		                url: url
		            });
		        };
		        window.eventListenerAdded = true;
		    })();
		}
		/**
		 * Subscribe logger to watcher
		 */
		AnimationFrame.subscribe({}, Logger.watch, []);
		exports.default = Logger;
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		;(function (root, factory) {
			if (true) {
				// CommonJS
				module.exports = exports = factory(__webpack_require__(15));
			}
			else if (typeof define === "function" && define.amd) {
				// AMD
				define(["./core"], factory);
			}
			else {
				// Global (browser)
				factory(root.CryptoJS);
			}
		}(this, function (CryptoJS) {
		
			(function (Math) {
			    // Shortcuts
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var Hasher = C_lib.Hasher;
			    var C_algo = C.algo;
		
			    // Constants table
			    var T = [];
		
			    // Compute constants
			    (function () {
			        for (var i = 0; i < 64; i++) {
			            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
			        }
			    }());
		
			    /**
			     * MD5 hash algorithm.
			     */
			    var MD5 = C_algo.MD5 = Hasher.extend({
			        _doReset: function () {
			            this._hash = new WordArray.init([
			                0x67452301, 0xefcdab89,
			                0x98badcfe, 0x10325476
			            ]);
			        },
		
			        _doProcessBlock: function (M, offset) {
			            // Swap endian
			            for (var i = 0; i < 16; i++) {
			                // Shortcuts
			                var offset_i = offset + i;
			                var M_offset_i = M[offset_i];
		
			                M[offset_i] = (
			                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
			                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
			                );
			            }
		
			            // Shortcuts
			            var H = this._hash.words;
		
			            var M_offset_0  = M[offset + 0];
			            var M_offset_1  = M[offset + 1];
			            var M_offset_2  = M[offset + 2];
			            var M_offset_3  = M[offset + 3];
			            var M_offset_4  = M[offset + 4];
			            var M_offset_5  = M[offset + 5];
			            var M_offset_6  = M[offset + 6];
			            var M_offset_7  = M[offset + 7];
			            var M_offset_8  = M[offset + 8];
			            var M_offset_9  = M[offset + 9];
			            var M_offset_10 = M[offset + 10];
			            var M_offset_11 = M[offset + 11];
			            var M_offset_12 = M[offset + 12];
			            var M_offset_13 = M[offset + 13];
			            var M_offset_14 = M[offset + 14];
			            var M_offset_15 = M[offset + 15];
		
			            // Working varialbes
			            var a = H[0];
			            var b = H[1];
			            var c = H[2];
			            var d = H[3];
		
			            // Computation
			            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
			            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
			            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
			            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
			            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
			            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
			            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
			            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
			            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
			            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
			            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
			            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
			            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
			            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
			            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
			            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
		
			            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
			            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
			            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
			            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
			            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
			            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
			            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
			            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
			            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
			            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
			            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
			            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
			            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
			            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
			            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
			            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
		
			            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
			            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
			            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
			            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
			            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
			            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
			            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
			            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
			            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
			            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
			            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
			            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
			            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
			            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
			            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
			            b = HH(b, c, d, a, M_offset_2,  23, T[47]);
		
			            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
			            d = II(d, a, b, c, M_offset_7,  10, T[49]);
			            c = II(c, d, a, b, M_offset_14, 15, T[50]);
			            b = II(b, c, d, a, M_offset_5,  21, T[51]);
			            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
			            d = II(d, a, b, c, M_offset_3,  10, T[53]);
			            c = II(c, d, a, b, M_offset_10, 15, T[54]);
			            b = II(b, c, d, a, M_offset_1,  21, T[55]);
			            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
			            d = II(d, a, b, c, M_offset_15, 10, T[57]);
			            c = II(c, d, a, b, M_offset_6,  15, T[58]);
			            b = II(b, c, d, a, M_offset_13, 21, T[59]);
			            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
			            d = II(d, a, b, c, M_offset_11, 10, T[61]);
			            c = II(c, d, a, b, M_offset_2,  15, T[62]);
			            b = II(b, c, d, a, M_offset_9,  21, T[63]);
		
			            // Intermediate hash value
			            H[0] = (H[0] + a) | 0;
			            H[1] = (H[1] + b) | 0;
			            H[2] = (H[2] + c) | 0;
			            H[3] = (H[3] + d) | 0;
			        },
		
			        _doFinalize: function () {
			            // Shortcuts
			            var data = this._data;
			            var dataWords = data.words;
		
			            var nBitsTotal = this._nDataBytes * 8;
			            var nBitsLeft = data.sigBytes * 8;
		
			            // Add padding
			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
		
			            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
			            var nBitsTotalL = nBitsTotal;
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
			                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
			                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
			            );
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
			                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
			                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
			            );
		
			            data.sigBytes = (dataWords.length + 1) * 4;
		
			            // Hash final blocks
			            this._process();
		
			            // Shortcuts
			            var hash = this._hash;
			            var H = hash.words;
		
			            // Swap endian
			            for (var i = 0; i < 4; i++) {
			                // Shortcut
			                var H_i = H[i];
		
			                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
			                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
			            }
		
			            // Return final computed hash
			            return hash;
			        },
		
			        clone: function () {
			            var clone = Hasher.clone.call(this);
			            clone._hash = this._hash.clone();
		
			            return clone;
			        }
			    });
		
			    function FF(a, b, c, d, x, s, t) {
			        var n = a + ((b & c) | (~b & d)) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
		
			    function GG(a, b, c, d, x, s, t) {
			        var n = a + ((b & d) | (c & ~d)) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
		
			    function HH(a, b, c, d, x, s, t) {
			        var n = a + (b ^ c ^ d) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
		
			    function II(a, b, c, d, x, s, t) {
			        var n = a + (c ^ (b | ~d)) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
		
			    /**
			     * Shortcut function to the hasher's object interface.
			     *
			     * @param {WordArray|string} message The message to hash.
			     *
			     * @return {WordArray} The hash.
			     *
			     * @static
			     *
			     * @example
			     *
			     *     var hash = CryptoJS.MD5('message');
			     *     var hash = CryptoJS.MD5(wordArray);
			     */
			    C.MD5 = Hasher._createHelper(MD5);
		
			    /**
			     * Shortcut function to the HMAC's object interface.
			     *
			     * @param {WordArray|string} message The message to hash.
			     * @param {WordArray|string} key The secret key.
			     *
			     * @return {WordArray} The HMAC.
			     *
			     * @static
			     *
			     * @example
			     *
			     *     var hmac = CryptoJS.HmacMD5(message, key);
			     */
			    C.HmacMD5 = Hasher._createHmacHelper(MD5);
			}(Math));
		
		
			return CryptoJS.MD5;
		
		}));
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		;(function (root, factory) {
			if (true) {
				// CommonJS
				module.exports = exports = factory();
			}
			else if (typeof define === "function" && define.amd) {
				// AMD
				define([], factory);
			}
			else {
				// Global (browser)
				root.CryptoJS = factory();
			}
		}(this, function () {
		
			/**
			 * CryptoJS core components.
			 */
			var CryptoJS = CryptoJS || (function (Math, undefined) {
			    /*
			     * Local polyfil of Object.create
			     */
			    var create = Object.create || (function () {
			        function F() {};
		
			        return function (obj) {
			            var subtype;
		
			            F.prototype = obj;
		
			            subtype = new F();
		
			            F.prototype = null;
		
			            return subtype;
			        };
			    }())
		
			    /**
			     * CryptoJS namespace.
			     */
			    var C = {};
		
			    /**
			     * Library namespace.
			     */
			    var C_lib = C.lib = {};
		
			    /**
			     * Base object for prototypal inheritance.
			     */
			    var Base = C_lib.Base = (function () {
		
		
			        return {
			            /**
			             * Creates a new object that inherits from this object.
			             *
			             * @param {Object} overrides Properties to copy into the new object.
			             *
			             * @return {Object} The new object.
			             *
			             * @static
			             *
			             * @example
			             *
			             *     var MyType = CryptoJS.lib.Base.extend({
			             *         field: 'value',
			             *
			             *         method: function () {
			             *         }
			             *     });
			             */
			            extend: function (overrides) {
			                // Spawn
			                var subtype = create(this);
		
			                // Augment
			                if (overrides) {
			                    subtype.mixIn(overrides);
			                }
		
			                // Create default initializer
			                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
			                    subtype.init = function () {
			                        subtype.$super.init.apply(this, arguments);
			                    };
			                }
		
			                // Initializer's prototype is the subtype object
			                subtype.init.prototype = subtype;
		
			                // Reference supertype
			                subtype.$super = this;
		
			                return subtype;
			            },
		
			            /**
			             * Extends this object and runs the init method.
			             * Arguments to create() will be passed to init().
			             *
			             * @return {Object} The new object.
			             *
			             * @static
			             *
			             * @example
			             *
			             *     var instance = MyType.create();
			             */
			            create: function () {
			                var instance = this.extend();
			                instance.init.apply(instance, arguments);
		
			                return instance;
			            },
		
			            /**
			             * Initializes a newly created object.
			             * Override this method to add some logic when your objects are created.
			             *
			             * @example
			             *
			             *     var MyType = CryptoJS.lib.Base.extend({
			             *         init: function () {
			             *             // ...
			             *         }
			             *     });
			             */
			            init: function () {
			            },
		
			            /**
			             * Copies properties into this object.
			             *
			             * @param {Object} properties The properties to mix in.
			             *
			             * @example
			             *
			             *     MyType.mixIn({
			             *         field: 'value'
			             *     });
			             */
			            mixIn: function (properties) {
			                for (var propertyName in properties) {
			                    if (properties.hasOwnProperty(propertyName)) {
			                        this[propertyName] = properties[propertyName];
			                    }
			                }
		
			                // IE won't copy toString using the loop above
			                if (properties.hasOwnProperty('toString')) {
			                    this.toString = properties.toString;
			                }
			            },
		
			            /**
			             * Creates a copy of this object.
			             *
			             * @return {Object} The clone.
			             *
			             * @example
			             *
			             *     var clone = instance.clone();
			             */
			            clone: function () {
			                return this.init.prototype.extend(this);
			            }
			        };
			    }());
		
			    /**
			     * An array of 32-bit words.
			     *
			     * @property {Array} words The array of 32-bit words.
			     * @property {number} sigBytes The number of significant bytes in this word array.
			     */
			    var WordArray = C_lib.WordArray = Base.extend({
			        /**
			         * Initializes a newly created word array.
			         *
			         * @param {Array} words (Optional) An array of 32-bit words.
			         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
			         *
			         * @example
			         *
			         *     var wordArray = CryptoJS.lib.WordArray.create();
			         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
			         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
			         */
			        init: function (words, sigBytes) {
			            words = this.words = words || [];
		
			            if (sigBytes != undefined) {
			                this.sigBytes = sigBytes;
			            } else {
			                this.sigBytes = words.length * 4;
			            }
			        },
		
			        /**
			         * Converts this word array to a string.
			         *
			         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
			         *
			         * @return {string} The stringified word array.
			         *
			         * @example
			         *
			         *     var string = wordArray + '';
			         *     var string = wordArray.toString();
			         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
			         */
			        toString: function (encoder) {
			            return (encoder || Hex).stringify(this);
			        },
		
			        /**
			         * Concatenates a word array to this word array.
			         *
			         * @param {WordArray} wordArray The word array to append.
			         *
			         * @return {WordArray} This word array.
			         *
			         * @example
			         *
			         *     wordArray1.concat(wordArray2);
			         */
			        concat: function (wordArray) {
			            // Shortcuts
			            var thisWords = this.words;
			            var thatWords = wordArray.words;
			            var thisSigBytes = this.sigBytes;
			            var thatSigBytes = wordArray.sigBytes;
		
			            // Clamp excess bits
			            this.clamp();
		
			            // Concat
			            if (thisSigBytes % 4) {
			                // Copy one byte at a time
			                for (var i = 0; i < thatSigBytes; i++) {
			                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
			                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
			                }
			            } else {
			                // Copy one word at a time
			                for (var i = 0; i < thatSigBytes; i += 4) {
			                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
			                }
			            }
			            this.sigBytes += thatSigBytes;
		
			            // Chainable
			            return this;
			        },
		
			        /**
			         * Removes insignificant bits.
			         *
			         * @example
			         *
			         *     wordArray.clamp();
			         */
			        clamp: function () {
			            // Shortcuts
			            var words = this.words;
			            var sigBytes = this.sigBytes;
		
			            // Clamp
			            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
			            words.length = Math.ceil(sigBytes / 4);
			        },
		
			        /**
			         * Creates a copy of this word array.
			         *
			         * @return {WordArray} The clone.
			         *
			         * @example
			         *
			         *     var clone = wordArray.clone();
			         */
			        clone: function () {
			            var clone = Base.clone.call(this);
			            clone.words = this.words.slice(0);
		
			            return clone;
			        },
		
			        /**
			         * Creates a word array filled with random bytes.
			         *
			         * @param {number} nBytes The number of random bytes to generate.
			         *
			         * @return {WordArray} The random word array.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var wordArray = CryptoJS.lib.WordArray.random(16);
			         */
			        random: function (nBytes) {
			            var words = [];
		
			            var r = (function (m_w) {
			                var m_w = m_w;
			                var m_z = 0x3ade68b1;
			                var mask = 0xffffffff;
		
			                return function () {
			                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
			                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
			                    var result = ((m_z << 0x10) + m_w) & mask;
			                    result /= 0x100000000;
			                    result += 0.5;
			                    return result * (Math.random() > .5 ? 1 : -1);
			                }
			            });
		
			            for (var i = 0, rcache; i < nBytes; i += 4) {
			                var _r = r((rcache || Math.random()) * 0x100000000);
		
			                rcache = _r() * 0x3ade67b7;
			                words.push((_r() * 0x100000000) | 0);
			            }
		
			            return new WordArray.init(words, nBytes);
			        }
			    });
		
			    /**
			     * Encoder namespace.
			     */
			    var C_enc = C.enc = {};
		
			    /**
			     * Hex encoding strategy.
			     */
			    var Hex = C_enc.Hex = {
			        /**
			         * Converts a word array to a hex string.
			         *
			         * @param {WordArray} wordArray The word array.
			         *
			         * @return {string} The hex string.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
			         */
			        stringify: function (wordArray) {
			            // Shortcuts
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
		
			            // Convert
			            var hexChars = [];
			            for (var i = 0; i < sigBytes; i++) {
			                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
			                hexChars.push((bite >>> 4).toString(16));
			                hexChars.push((bite & 0x0f).toString(16));
			            }
		
			            return hexChars.join('');
			        },
		
			        /**
			         * Converts a hex string to a word array.
			         *
			         * @param {string} hexStr The hex string.
			         *
			         * @return {WordArray} The word array.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
			         */
			        parse: function (hexStr) {
			            // Shortcut
			            var hexStrLength = hexStr.length;
		
			            // Convert
			            var words = [];
			            for (var i = 0; i < hexStrLength; i += 2) {
			                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
			            }
		
			            return new WordArray.init(words, hexStrLength / 2);
			        }
			    };
		
			    /**
			     * Latin1 encoding strategy.
			     */
			    var Latin1 = C_enc.Latin1 = {
			        /**
			         * Converts a word array to a Latin1 string.
			         *
			         * @param {WordArray} wordArray The word array.
			         *
			         * @return {string} The Latin1 string.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
			         */
			        stringify: function (wordArray) {
			            // Shortcuts
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
		
			            // Convert
			            var latin1Chars = [];
			            for (var i = 0; i < sigBytes; i++) {
			                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
			                latin1Chars.push(String.fromCharCode(bite));
			            }
		
			            return latin1Chars.join('');
			        },
		
			        /**
			         * Converts a Latin1 string to a word array.
			         *
			         * @param {string} latin1Str The Latin1 string.
			         *
			         * @return {WordArray} The word array.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
			         */
			        parse: function (latin1Str) {
			            // Shortcut
			            var latin1StrLength = latin1Str.length;
		
			            // Convert
			            var words = [];
			            for (var i = 0; i < latin1StrLength; i++) {
			                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
			            }
		
			            return new WordArray.init(words, latin1StrLength);
			        }
			    };
		
			    /**
			     * UTF-8 encoding strategy.
			     */
			    var Utf8 = C_enc.Utf8 = {
			        /**
			         * Converts a word array to a UTF-8 string.
			         *
			         * @param {WordArray} wordArray The word array.
			         *
			         * @return {string} The UTF-8 string.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
			         */
			        stringify: function (wordArray) {
			            try {
			                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
			            } catch (e) {
			                throw new Error('Malformed UTF-8 data');
			            }
			        },
		
			        /**
			         * Converts a UTF-8 string to a word array.
			         *
			         * @param {string} utf8Str The UTF-8 string.
			         *
			         * @return {WordArray} The word array.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
			         */
			        parse: function (utf8Str) {
			            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
			        }
			    };
		
			    /**
			     * Abstract buffered block algorithm template.
			     *
			     * The property blockSize must be implemented in a concrete subtype.
			     *
			     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
			     */
			    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
			        /**
			         * Resets this block algorithm's data buffer to its initial state.
			         *
			         * @example
			         *
			         *     bufferedBlockAlgorithm.reset();
			         */
			        reset: function () {
			            // Initial values
			            this._data = new WordArray.init();
			            this._nDataBytes = 0;
			        },
		
			        /**
			         * Adds new data to this block algorithm's buffer.
			         *
			         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
			         *
			         * @example
			         *
			         *     bufferedBlockAlgorithm._append('data');
			         *     bufferedBlockAlgorithm._append(wordArray);
			         */
			        _append: function (data) {
			            // Convert string to WordArray, else assume WordArray already
			            if (typeof data == 'string') {
			                data = Utf8.parse(data);
			            }
		
			            // Append
			            this._data.concat(data);
			            this._nDataBytes += data.sigBytes;
			        },
		
			        /**
			         * Processes available data blocks.
			         *
			         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
			         *
			         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
			         *
			         * @return {WordArray} The processed data.
			         *
			         * @example
			         *
			         *     var processedData = bufferedBlockAlgorithm._process();
			         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
			         */
			        _process: function (doFlush) {
			            // Shortcuts
			            var data = this._data;
			            var dataWords = data.words;
			            var dataSigBytes = data.sigBytes;
			            var blockSize = this.blockSize;
			            var blockSizeBytes = blockSize * 4;
		
			            // Count blocks ready
			            var nBlocksReady = dataSigBytes / blockSizeBytes;
			            if (doFlush) {
			                // Round up to include partial blocks
			                nBlocksReady = Math.ceil(nBlocksReady);
			            } else {
			                // Round down to include only full blocks,
			                // less the number of blocks that must remain in the buffer
			                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
			            }
		
			            // Count words ready
			            var nWordsReady = nBlocksReady * blockSize;
		
			            // Count bytes ready
			            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
		
			            // Process blocks
			            if (nWordsReady) {
			                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
			                    // Perform concrete-algorithm logic
			                    this._doProcessBlock(dataWords, offset);
			                }
		
			                // Remove processed words
			                var processedWords = dataWords.splice(0, nWordsReady);
			                data.sigBytes -= nBytesReady;
			            }
		
			            // Return processed words
			            return new WordArray.init(processedWords, nBytesReady);
			        },
		
			        /**
			         * Creates a copy of this object.
			         *
			         * @return {Object} The clone.
			         *
			         * @example
			         *
			         *     var clone = bufferedBlockAlgorithm.clone();
			         */
			        clone: function () {
			            var clone = Base.clone.call(this);
			            clone._data = this._data.clone();
		
			            return clone;
			        },
		
			        _minBufferSize: 0
			    });
		
			    /**
			     * Abstract hasher template.
			     *
			     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
			     */
			    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
			        /**
			         * Configuration options.
			         */
			        cfg: Base.extend(),
		
			        /**
			         * Initializes a newly created hasher.
			         *
			         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
			         *
			         * @example
			         *
			         *     var hasher = CryptoJS.algo.SHA256.create();
			         */
			        init: function (cfg) {
			            // Apply config defaults
			            this.cfg = this.cfg.extend(cfg);
		
			            // Set initial values
			            this.reset();
			        },
		
			        /**
			         * Resets this hasher to its initial state.
			         *
			         * @example
			         *
			         *     hasher.reset();
			         */
			        reset: function () {
			            // Reset data buffer
			            BufferedBlockAlgorithm.reset.call(this);
		
			            // Perform concrete-hasher logic
			            this._doReset();
			        },
		
			        /**
			         * Updates this hasher with a message.
			         *
			         * @param {WordArray|string} messageUpdate The message to append.
			         *
			         * @return {Hasher} This hasher.
			         *
			         * @example
			         *
			         *     hasher.update('message');
			         *     hasher.update(wordArray);
			         */
			        update: function (messageUpdate) {
			            // Append
			            this._append(messageUpdate);
		
			            // Update the hash
			            this._process();
		
			            // Chainable
			            return this;
			        },
		
			        /**
			         * Finalizes the hash computation.
			         * Note that the finalize operation is effectively a destructive, read-once operation.
			         *
			         * @param {WordArray|string} messageUpdate (Optional) A final message update.
			         *
			         * @return {WordArray} The hash.
			         *
			         * @example
			         *
			         *     var hash = hasher.finalize();
			         *     var hash = hasher.finalize('message');
			         *     var hash = hasher.finalize(wordArray);
			         */
			        finalize: function (messageUpdate) {
			            // Final message update
			            if (messageUpdate) {
			                this._append(messageUpdate);
			            }
		
			            // Perform concrete-hasher logic
			            var hash = this._doFinalize();
		
			            return hash;
			        },
		
			        blockSize: 512/32,
		
			        /**
			         * Creates a shortcut function to a hasher's object interface.
			         *
			         * @param {Hasher} hasher The hasher to create a helper for.
			         *
			         * @return {Function} The shortcut function.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
			         */
			        _createHelper: function (hasher) {
			            return function (message, cfg) {
			                return new hasher.init(cfg).finalize(message);
			            };
			        },
		
			        /**
			         * Creates a shortcut function to the HMAC's object interface.
			         *
			         * @param {Hasher} hasher The hasher to use in this HMAC helper.
			         *
			         * @return {Function} The shortcut function.
			         *
			         * @static
			         *
			         * @example
			         *
			         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
			         */
			        _createHmacHelper: function (hasher) {
			            return function (message, key) {
			                return new C_algo.HMAC.init(hasher, key).finalize(message);
			            };
			        }
			    });
		
			    /**
			     * Algorithm namespace.
			     */
			    var C_algo = C.algo = {};
		
			    return C;
			}(Math));
		
		
			return CryptoJS;
		
		}));
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		(function webpackUniversalModuleDefinition(root, factory) {
			if(true)
				module.exports = factory();
			else if(typeof define === 'function' && define.amd)
				define("AnimationFrame", [], factory);
			else if(typeof exports === 'object')
				exports["AnimationFrame"] = factory();
			else
				root["AnimationFrame"] = factory();
		})(this, function() {
		return /******/ (function(modules) { // webpackBootstrap
		/******/ 	// The module cache
		/******/ 	var installedModules = {};
		/******/
		/******/ 	// The require function
		/******/ 	function __webpack_require__(moduleId) {
		/******/
		/******/ 		// Check if module is in cache
		/******/ 		if(installedModules[moduleId])
		/******/ 			return installedModules[moduleId].exports;
		/******/
		/******/ 		// Create a new module (and put it into the cache)
		/******/ 		var module = installedModules[moduleId] = {
		/******/ 			exports: {},
		/******/ 			id: moduleId,
		/******/ 			loaded: false
		/******/ 		};
		/******/
		/******/ 		// Execute the module function
		/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ 		// Flag the module as loaded
		/******/ 		module.loaded = true;
		/******/
		/******/ 		// Return the exports of the module
		/******/ 		return module.exports;
		/******/ 	}
		/******/
		/******/
		/******/ 	// expose the modules object (__webpack_modules__)
		/******/ 	__webpack_require__.m = modules;
		/******/
		/******/ 	// expose the module cache
		/******/ 	__webpack_require__.c = installedModules;
		/******/
		/******/ 	// __webpack_public_path__
		/******/ 	__webpack_require__.p = "";
		/******/
		/******/ 	// Load entry module and return exports
		/******/ 	return __webpack_require__(0);
		/******/ })
		/************************************************************************/
		/******/ ([
		/* 0 */
		/***/ function(module, exports, __webpack_require__) {
		
			module.exports = __webpack_require__(4);
		
		
		/***/ },
		/* 1 */,
		/* 2 */,
		/* 3 */,
		/* 4 */
		/***/ function(module, exports) {
		
			"use strict";
			/**
			 * requestAnimationFrame polyfill
			 */
			
			var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
			
			window.requestAnimationFrame = function () {
			    return window && (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame) || function (callback) {
			        window.setTimeout(callback, 1000 / 60);
			    };
			}();
			/**
			 * Bind polyfill
			 */
			function bind(b) {
			    /**
			     * If try bind variable that not a function, then throw error
			     */
			    if (typeof this !== "function") {
			        throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
			    }
			    /**
			     * let Array slice function
			     */
			    var a = Array.prototype.slice;
			    var f = a.call(arguments, 1);
			    var e = this;
			    function c() {
			        if (typeof window !== "undefined" && _typeof(window.console) === "object" && typeof window.console.log === "function") {
			            window.console.log("Bind polyfill");
			        }
			    }
			    function d() {
			        return e.apply(this instanceof c ? this : b || window, f.concat(a.call(arguments)));
			    }
			    /**
			     * Registered this prototype as prototype to bind implementation functions
			     */
			    c.prototype = this.prototype;
			    d.prototype = new c();
			    /**
			     * Return bind polyfill
			     */
			    return d;
			}
			Function.prototype.bind = Function.prototype.bind || bind;
			/**
			 * Object.keys polyfill
			 */
			function keys() {
			    var hasDoNotEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
			    var doNotEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];
			    var doNotEnumsLength = doNotEnums.length;
			    return function (obj) {
			        if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object" && (typeof obj !== "function" || obj === null)) {
			            throw new TypeError("Object.keys called on non-object");
			        }
			        var result = [];
			        for (var prop in obj) {
			            if (Object.prototype.hasOwnProperty.call(obj, prop)) {
			                result.push(prop);
			            }
			        }
			        if (hasDoNotEnumBug) {
			            for (var i = 0; i < doNotEnumsLength; i++) {
			                if (Object.prototype.hasOwnProperty.call(obj, doNotEnums[i])) {
			                    result.push(doNotEnums[i]);
			                }
			            }
			        }
			        return result;
			    };
			}
			Object.keys = Object.keys || keys();
			/**
			 * Request animation frame call stack class
			 */
			var AnimationFrame = function () {
			    /**
			     * Create request animation frame
			     */
			    function AnimationFrame() {
			        /**
			         * Subscribed methods
			         */
			        this.stack = {};
			        /**
			         * Start requestAnimationFrame watcher
			         */
			        this.watch();
			    }
			    /**
			     * Subscribe method to watch
			     * @param context
			     * @param callback
			     * @param params
			     * @param ID
			     * @return {boolean|string}
			     */
			    AnimationFrame.prototype.subscribe = function (context, callback, params, ID) {
			        if (context === void 0) {
			            context = window;
			        }
			        if (callback === void 0) {
			            callback = function callback() {
			                return null;
			            };
			        }
			        if (params === void 0) {
			            params = [];
			        }
			        try {
			            /**
			             * If context and callback passed and they are object and function
			             */
			            if ((typeof context === "undefined" ? "undefined" : _typeof(context)) === "object" && typeof callback === "function") {
			                /**
			                 * Create UID
			                 */
			                var d = new Date();
			                var localID = ID || "x-" + d.getTime() + "-" + Math.round(Math.random() * 1e6);
			                /**
			                 * Add method to the stack
			                 */
			                this.stack[localID] = {
			                    context: context,
			                    callback: callback,
			                    params: params
			                };
			                /**
			                 * Write to console count of the subscribed methods
			                 */
			                if (typeof window !== "undefined" && _typeof(window.console) === "object" && typeof window.console.info === "function") {
			                    window.console.info("AnimationFrame stack " + Object.keys(this.stack).length);
			                }
			                /**
			                 * Return UID
			                 */
			                return localID;
			            }
			        } catch (e) {
			            if (typeof window !== "undefined" && _typeof(window.console) === "object" && typeof window.console.error === "function") {
			                window.console.error(e);
			            }
			        }
			        /**
			         * If something goes wrong return false
			         */
			        return false;
			    };
			    /**
			     * Unsubscribe method by ID
			     * @param ID
			     */
			    AnimationFrame.prototype.unsubscribe = function (ID) {
			        /**
			         * If required method exist in the stack
			         */
			        if (this.stack[ID]) {
			            /**
			             * Nullify method in the stack and destroy it
			             */
			            this.stack[ID] = false;
			            delete this.stack[ID];
			            /**
			             * Write to console count of the subscribed methods
			             */
			            if (typeof window !== "undefined" && _typeof(window.console) === "object" && typeof window.console.info === "function") {
			                window.console.info("AnimationFrame stack " + Object.keys(this.stack).length);
			            }
			        }
			    };
			    /**
			     * Watch and call methods
			     */
			    AnimationFrame.prototype.watch = function () {
			        try {
			            /**
			             * If stack exist, it is an object and it is contains methods
			             */
			            if (this.stack && _typeof(this.stack) === "object" && Object.keys(this.stack).length > 0) {
			                /**
			                 * Loop all methods in stack
			                 */
			                for (var ID in this.stack) {
			                    /**
			                     * Process only methods without extended properties
			                     */
			                    if (this.stack.hasOwnProperty(ID)) {
			                        try {
			                            /**
			                             * If ID exist and it is a string
			                             */
			                            if (ID && typeof ID === "string") {
			                                /**
			                                 * Get subscribed method params by ID
			                                 */
			                                var objCall = this.stack[ID];
			                                /**
			                                 * If params exist, it is an object, and it is contains call context,
			                                 * callback, and parameters which is array
			                                 */
			                                if (objCall && (typeof objCall === "undefined" ? "undefined" : _typeof(objCall)) === "object" && objCall.context && objCall.callback && objCall.params && _typeof(objCall.context) === "object" && typeof objCall.callback === "function" && Array.isArray(objCall.params)) {
			                                    /**
			                                     * Call subscribed method
			                                     */
			                                    objCall.callback.apply(objCall.context, objCall.params);
			                                }
			                            }
			                        } catch (e) {
			                            if (typeof window !== "undefined" && _typeof(window.console) === "object" && typeof window.console.error === "function") {
			                                window.console.error(e);
			                            }
			                        }
			                    }
			                }
			            }
			        } catch (e) {
			            if (typeof window !== "undefined" && _typeof(window.console) === "object" && typeof window.console.error === "function") {
			                window.console.error(e);
			            }
			        }
			        /**
			         * Recall watcher
			         */
			        window.requestAnimationFrame(this.watch.bind(this));
			    };
			    return AnimationFrame;
			}();
			/**
			 * Create single request animation frame object
			 * @type {AnimationFrame}
			 */
			window.AnimationFrame = window.AnimationFrame || new AnimationFrame();
			module.exports = window.AnimationFrame;
		
		/***/ }
		/******/ ])
		});
		;
		//# sourceMappingURL=data:application/json;charset=utf-8;base64,
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The DOMStorage
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var DOMStorage = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function DOMStorage(hash) {
		    _classCallCheck(this, DOMStorage);
		
		    this.hash = hash || location.hostname;
		    this.domStorage = document.getElementById(this.hash);
		    if (!this.domStorage) {
		      this.domStorage = document.createElement("div");
		      this.domStorage.id = this.hash;
		    }
		    if (document.body) {
		      document.body.appendChild(this.domStorage);
		      this.domStorage = document.getElementById(this.hash);
		      if (this.isSupported()) {
		        this.domStorage.style.behavior = "url(#default#userData)";
		      }
		    }
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  DOMStorage.prototype.isSupported = function isSupported() {
		    return _typeof(this.domStorage) === "object" && _typeof(this.domStorage.parentNode) === "object" && typeof this.domStorage.addBehavior !== "undefined";
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @return {boolean}
		   */
		
		
		  DOMStorage.prototype.setItem = function setItem(checkSupport, key, value) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Set dom value
		         */
		        this.domStorage.setAttribute(localKey, value);
		        this.domStorage.save(this.hash);
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === value;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  DOMStorage.prototype.getItem = function getItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Get value
		         */
		        this.domStorage.load(this.hash);
		        var value = this.domStorage.getAttribute(localKey);
		        /**
		         * If value exist, return it
		         */
		        if (value) {
		          return value;
		        } else {
		          return false;
		        }
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  DOMStorage.prototype.removeItem = function removeItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Clean value and remove
		         * @type {boolean}
		         */
		        this.domStorage.removeAttribute(localKey);
		        this.domStorage.save(this.hash);
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  DOMStorage.prototype.getKeys = function getKeys(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The array of available keys
		         * @type {Array}
		         */
		        var arrKeys = [];
		        /**
		         * Get the array from document cookie split by ;
		         * @type {string[]}
		         */
		        var localArrKeys = this.domStorage.XMLDocument.documentElement.attributes;
		        /**
		         * Iterate through the globalStorage
		         */
		        for (var i = 0; i < localArrKeys.length; i++) {
		          var key = localArrKeys[i].name;
		          /**
		           * If the key contains hash add it to the list
		           */
		          if (key.indexOf(this.hash) === 0) {
		            /**
		             * Add key to the list
		             */
		            arrKeys.push(key.substr(this.hash.length + 1));
		          }
		        }
		        return arrKeys;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  DOMStorage.prototype.clear = function clear(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        var arrKeys = this.getKeys(checkSupport);
		        if (arrKeys) {
		          for (var _iterator = arrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		              if (_i >= _iterator.length) break;
		              _ref = _iterator[_i++];
		            } else {
		              _i = _iterator.next();
		              if (_i.done) break;
		              _ref = _i.value;
		            }
		
		            var i = _ref;
		
		            this.removeItem(checkSupport, i);
		          }
		        }
		        /**
		         * If all ok return true
		         */
		        return this.getKeys(checkSupport).length === 0;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return true;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return DOMStorage;
		}();
		
		exports.default = DOMStorage;
	
	/***/ },
	/* 18 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The GlobalStorage
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var GlobalStorage = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function GlobalStorage(hash) {
		    _classCallCheck(this, GlobalStorage);
		
		    this.hash = hash || location.hostname;
		    if (!window.globalStorage) {
		      window.globalStorage = {};
		    }
		    if (!window.globalStorage[document.domain]) {
		      window.globalStorage[document.domain] = {};
		    }
		    this.globalStorage = window.globalStorage[document.domain];
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  GlobalStorage.prototype.isSupported = function isSupported() {
		    return _typeof(this.globalStorage) === "object";
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @return {boolean}
		   */
		
		
		  GlobalStorage.prototype.setItem = function setItem(checkSupport, key, value) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Set value
		         * @type {string}
		         */
		        this.globalStorage[localKey] = value;
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === value;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  GlobalStorage.prototype.getItem = function getItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Get value
		         */
		        var value = this.globalStorage[localKey];
		        /**
		         * If value exist, return it
		         */
		        if (value) {
		          return value;
		        } else {
		          return false;
		        }
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  GlobalStorage.prototype.removeItem = function removeItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Clean value and remove
		         * @type {boolean}
		         */
		        this.globalStorage[localKey] = false;
		        delete this.globalStorage[localKey];
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  GlobalStorage.prototype.getKeys = function getKeys(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The array of available keys
		         * @type {Array}
		         */
		        var arrKeys = [];
		        /**
		         * Get the array from document cookie split by ;
		         * @type {string[]}
		         */
		        var localArrKeys = Object.keys(this.globalStorage);
		        /**
		         * Iterate through the globalStorage
		         */
		        for (var _iterator = localArrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		          var _ref;
		
		          if (_isArray) {
		            if (_i >= _iterator.length) break;
		            _ref = _iterator[_i++];
		          } else {
		            _i = _iterator.next();
		            if (_i.done) break;
		            _ref = _i.value;
		          }
		
		          var key = _ref;
		
		          /**
		           * If the key contains hash add it to the list
		           */
		          if (key.indexOf(this.hash) === 0) {
		            /**
		             * Add key to the list
		             */
		            arrKeys.push(key.substr(this.hash.length + 1));
		          }
		        }
		        return arrKeys;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  GlobalStorage.prototype.clear = function clear(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        var arrKeys = this.getKeys(checkSupport);
		        if (arrKeys) {
		          for (var _iterator2 = arrKeys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		            var _ref2;
		
		            if (_isArray2) {
		              if (_i2 >= _iterator2.length) break;
		              _ref2 = _iterator2[_i2++];
		            } else {
		              _i2 = _iterator2.next();
		              if (_i2.done) break;
		              _ref2 = _i2.value;
		            }
		
		            var i = _ref2;
		
		            this.removeItem(checkSupport, i);
		          }
		        }
		        /**
		         * If all ok return true
		         */
		        return this.getKeys(checkSupport).length === 0;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return true;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return GlobalStorage;
		}();
		
		exports.default = GlobalStorage;
	
	/***/ },
	/* 19 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The LocalStorage
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var LocalStorage = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function LocalStorage(hash) {
		    _classCallCheck(this, LocalStorage);
		
		    this.hash = hash || location.hostname;
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  LocalStorage.prototype.isSupported = function isSupported() {
		    return typeof window.localStorage !== "undefined";
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @return {boolean}
		   */
		
		
		  LocalStorage.prototype.setItem = function setItem(checkSupport, key, value) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Set value
		         * @type {string}
		         */
		        window.localStorage.setItem(localKey, value);
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === value;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  LocalStorage.prototype.getItem = function getItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Get value
		         */
		        var value = window.localStorage.getItem(localKey);
		        /**
		         * If value exist, return it
		         */
		        if (value) {
		          return value;
		        } else {
		          return false;
		        }
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  LocalStorage.prototype.removeItem = function removeItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Clean value and remove
		         * @type {boolean}
		         */
		        window.localStorage.removeItem(localKey);
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  LocalStorage.prototype.getKeys = function getKeys(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The array of available keys
		         * @type {Array}
		         */
		        var arrKeys = [];
		        /**
		         * Iterate through the localStorage
		         */
		        for (var i = 0; i < window.localStorage.length; i++) {
		          if (window.localStorage.key(i).indexOf(this.hash) === 0) {
		            arrKeys.push(window.localStorage.key(i).substr(this.hash.length + 1));
		          }
		        }
		        /**
		         * Return keys
		         */
		        return arrKeys;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  LocalStorage.prototype.clear = function clear(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        var arrKeys = this.getKeys(checkSupport);
		        if (arrKeys) {
		          for (var _iterator = arrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		              if (_i >= _iterator.length) break;
		              _ref = _iterator[_i++];
		            } else {
		              _i = _iterator.next();
		              if (_i.done) break;
		              _ref = _i.value;
		            }
		
		            var i = _ref;
		
		            this.removeItem(checkSupport, i);
		          }
		        }
		        /**
		         * If all ok return true
		         */
		        return this.getKeys(checkSupport).length === 0;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return true;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return LocalStorage;
		}();
		
		exports.default = LocalStorage;
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The SessionStorage
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var SessionStorage = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function SessionStorage(hash) {
		    _classCallCheck(this, SessionStorage);
		
		    this.hash = hash || location.hostname;
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  SessionStorage.prototype.isSupported = function isSupported() {
		    return typeof window.sessionStorage !== "undefined";
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @return {boolean}
		   */
		
		
		  SessionStorage.prototype.setItem = function setItem(checkSupport, key, value) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Set value
		         * @type {string}
		         */
		        window.sessionStorage.setItem(localKey, value);
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === value;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  SessionStorage.prototype.getItem = function getItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Get value
		         */
		        var value = window.sessionStorage.getItem(localKey);
		        /**
		         * If value exist, return it
		         */
		        if (value) {
		          return value;
		        } else {
		          return false;
		        }
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  SessionStorage.prototype.removeItem = function removeItem(checkSupport, key) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The hash needs for splitting scopes storage
		         * @type {string}
		         */
		        var localKey = this.hash + "_" + key;
		        /**
		         * Clean value and remove
		         * @type {boolean}
		         */
		        window.sessionStorage.removeItem(localKey);
		        /**
		         * If all ok return true
		         */
		        return this.getItem(checkSupport, key) === false;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  SessionStorage.prototype.getKeys = function getKeys(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        /**
		         * The array of available keys
		         * @type {Array}
		         */
		        var arrKeys = [];
		        /**
		         * Iterate through the SessionStorage
		         */
		        for (var i = 0; i < window.sessionStorage.length; i++) {
		          if (window.sessionStorage.key(i).indexOf(this.hash) === 0) {
		            arrKeys.push(window.sessionStorage.key(i).substr(this.hash.length + 1));
		          }
		        }
		        /**
		         * Return keys
		         */
		        return arrKeys;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  SessionStorage.prototype.clear = function clear(checkSupport) {
		    try {
		      /**
		       * If that store is supported
		       */
		      if (!checkSupport || this.isSupported()) {
		        var arrKeys = this.getKeys(checkSupport);
		        if (arrKeys) {
		          for (var _iterator = arrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		              if (_i >= _iterator.length) break;
		              _ref = _iterator[_i++];
		            } else {
		              _i = _iterator.next();
		              if (_i.done) break;
		              _ref = _i.value;
		            }
		
		            var i = _ref;
		
		            this.removeItem(checkSupport, i);
		          }
		        }
		        /**
		         * If all ok return true
		         */
		        return this.getKeys(checkSupport).length === 0;
		      } else {
		        /**
		         * If cookie does not supported return false
		         */
		        return true;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return SessionStorage;
		}();
		
		exports.default = SessionStorage;
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }

/******/ })
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,